task generatePlugin {
    assert rootProject.group
    assert rootProject.hasProperty('gradlePluginId')
    ext {
        pluginId = rootProject.property('gradlePluginId').toString()
    }
    dependsOn 'generatePluginClass', 'generatePluginTestClass', 'generatePluginMetadata'
}

task generatePluginClass {
    ext {
        className = "${generatePlugin.pluginId.split(/\./).last().capitalize()}Plugin"
        fqcn = "${rootProject.group}.$className"
        outputFile = file("src/main/groovy/${fqcn.replace('.', '/')}.groovy")
    }
    doLast {
        logger.lifecycle("Generating plugin class: $outputFile")
        outputFile.text = """\
package ${rootProject.group}

import org.gradle.api.Plugin
import org.gradle.api.Project

class $className implements Plugin<Project> {
    @Override
    void apply(Project project) {
        // TODO
    }
}
"""
    }
}

task generatePluginTestClass {
    ext {
        outputFile = file("src/test/groovy/${generatePluginClass.fqcn.replace('.', '/')}Spec.groovy")
    }
    doLast {
        logger.lifecycle("Generating plugin test: $outputFile")
        outputFile.text = """\
package ${rootProject.group}

import org.gradle.testfixtures.ProjectBuilder
import spock.lang.Specification

class ${generatePluginClass.className}Spec extends Specification {

    def "apply() should load the plugin"() {
        given:
        def project = ProjectBuilder.builder().build()

        when:
        project.with {
            apply plugin: '${generatePlugin.pluginId}'
        }

        then:
        project.plugins.hasPlugin(${generatePluginClass.className})
    }

}
"""
    }
}

task generatePluginMetadata {
    ext {
        outputFile = file("src/main/resources/META-INF/gradle-plugins/${generatePlugin.pluginId}.properties")
    }
    doLast {
        logger.lifecycle("Generating plugin metadata: $outputFile")
        outputFile.text = "implementation-class=${generatePluginClass.fqcn}"
    }
}
